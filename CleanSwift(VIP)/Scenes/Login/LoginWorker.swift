//
//  LoginWorker.swift
//  CleanSwift(VIP)
//
//  Created by Steve JobsOne on 4/14/20.
//  Copyright (c) 2020 Steve JobsOne. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginWarkerDelegate {
    func loaderWillShow(flag: Bool)
    func presentError(error:Error)
    func loginResponse(response:Login.Response.SignIn)
}

class LoginWorker: NSObject {
    
    
    var loginWarkerDelegate: LoginWarkerDelegate?
    
    func loginWith(request:Login.Request) {
        
        let parameter =  ["emailID": request.userID! as String,"password":request.password as Any,"online":"true"] as [String : Any]
        loginWarkerDelegate?.loaderWillShow(flag: true)
        NetworkClient.shared.sendRequest(methodType: .post, url: Domain.baseUrl() + APIEndpoint.API_USER_SIGNIN, parameter: parameter as [NSString : Any]) { (result) in
            
            self.loginWarkerDelegate?.loaderWillShow(flag: false)
            print(result)
            
            switch result{
            case .networkFinishedWithData(let data, let status):
                switch status {
                case HTTPStatusCodes.OK:
                    JSONDecoder.decodeData(model: Login.Response.SignIn.self, data) { (result) in
                        switch result{
                        case .success(let data):
                            self.loginWarkerDelegate?.loginResponse(response: data as! Login.Response.SignIn)
                            break
                        case .failure(let mess):
                            print("Parse data error:",mess)
                            break
                        }
                    }
                    break
                case HTTPStatusCodes.BadRequest:
                    JSONDecoder.decodeData(model: Login.Response.SignInData.self, data) { (result) in
                        switch result{
                        case .success(_):
                            break
                        case .failure(let mess):
                            print("Parse data error:",mess)
                            break
                        }
                    }
                    break
                default:
                    break
                }
                break
            case .networkFinishedWithError(let error):
                switch error {
                case NetworkError.invalidURL:
                    self.loginWarkerDelegate?.presentError(error: error)
                    break
                case NetworkError.offline:
                    self.loginWarkerDelegate?.presentError(error: error)
                    break
                default:
                    break
                }
                break
            }
        }
        
    }
}


