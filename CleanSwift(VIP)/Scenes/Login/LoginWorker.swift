//
//  LoginWorker.swift
//  CleanSwift(VIP)
//
//  Created by Steve JobsOne on 4/14/20.
//  Copyright (c) 2020 Steve JobsOne. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class LoginWorker: NSObject {
    
    
    func loginWith(request:Login.Request , completion: @escaping(Error?) -> ()) {
        
        let parameter =  ["emailID": request.userID! as String,"password":request.password as Any,"online":"true"] as [String : Any]
        
        NetworkClient.shared.sendRequest(methodType: .post, url: Domain.baseUrl() + APIEndpoint.API_USER_SIGNIN, parameter: parameter as [NSString : Any]) { (result) in
            
            let indecator = Loader.sharedInstance
            indecator.hideIndicator()
            
            switch result{
                
            case .success(let data,let code):
                print("pppp:",code,data)
                switch code {
                case 200...299:
                    JSONDecoder.decodeData(model: Login.Response.SignIn.self, data) { (result) in
                        switch result{
                        case .success(let data):
                            print("pppparse:",data)
                            break
                        case .failure(_):
                            break
                        }
                    }
                    break
                case 400:
                    JSONDecoder.decodeData(model: Login.Response.SignInData.self, data) { (result) in
                        switch result{
                        case .success(let data):
                            print(data)
                            break
                        case .failure(_):
                            break
                        }
                    }
                    break
                case 424:
                    break
                default:
                    break
                }
                break
            case .failure(let code,let str):
                print("fffff:",code,str)
                break
            }
        }
        
    }
}


